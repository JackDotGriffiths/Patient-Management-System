/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patientmanagementsystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import patientmanagementsystem.Appointments.NewAppointment;
import patientmanagementsystem.feedback.CreateFeedback;

/**
 *
 * @author jack-
 */
public class PatientPage extends javax.swing.JFrame {

    /**
     * Creates new form PatientPage
     */
    public PatientPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        logoutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ratingValue = new javax.swing.JSlider();
        doctorComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        feedbackText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        givefeedbackTooltip = new javax.swing.JLabel();
        submitfeedbackButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        viewratingCombo = new javax.swing.JComboBox<>();
        ratingLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        requestDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        requestDoctorBox = new javax.swing.JComboBox<>();
        requestappointmentButton = new javax.swing.JButton();
        givefeedbackTooltip1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        futureappointmentTable = new javax.swing.JTable();
        loginnameLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        pastappointmentTable = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        logoutButton.setText("Log Out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patient Page");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Give Doctor Feedback");

        ratingValue.setMajorTickSpacing(1);
        ratingValue.setMaximum(5);
        ratingValue.setMinimum(1);
        ratingValue.setMinorTickSpacing(1);
        ratingValue.setPaintLabels(true);
        ratingValue.setPaintTicks(true);
        ratingValue.setSnapToTicks(true);
        ratingValue.setToolTipText("Please choose a value.");
        ratingValue.setValue(3);

        doctorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Click to Load Doctors]" }));
        doctorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorComboBoxActionPerformed(evt);
            }
        });

        feedbackText.setColumns(20);
        feedbackText.setRows(5);
        feedbackText.setToolTipText("Enter any extra notes if you wish.");
        jScrollPane1.setViewportView(feedbackText);

        jLabel4.setText("Feedback (Optional):");

        jLabel5.setText("Rating : (1-worst,5-best)");

        givefeedbackTooltip.setForeground(new java.awt.Color(255, 51, 51));
        givefeedbackTooltip.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        givefeedbackTooltip.setText("Please choose a Doctor from the box Above.");
        givefeedbackTooltip.setToolTipText("TEST");

        submitfeedbackButton1.setText("Submit");
        submitfeedbackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitfeedbackButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(givefeedbackTooltip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doctorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ratingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(submitfeedbackButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel4)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(givefeedbackTooltip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ratingValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitfeedbackButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("View Doctor Rating");

        viewratingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Click to Load Doctors]" }));
        viewratingCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewratingComboActionPerformed(evt);
            }
        });

        ratingLabel.setForeground(new java.awt.Color(255, 51, 51));
        ratingLabel.setText("AVG: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewratingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ratingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(viewratingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratingLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        requestDate.setFormats(new SimpleDateFormat("dd/MM/yyyy"));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Request Appointment");

        requestDoctorBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[Click to Load Doctors]" }));
        requestDoctorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDoctorBoxActionPerformed(evt);
            }
        });

        requestappointmentButton.setText("Request");
        requestappointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestappointmentButtonActionPerformed(evt);
            }
        });

        givefeedbackTooltip1.setForeground(new java.awt.Color(255, 51, 51));
        givefeedbackTooltip1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        givefeedbackTooltip1.setText("Select Doctor & Date");
        givefeedbackTooltip1.setToolTipText("TEST");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(givefeedbackTooltip1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(requestappointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(requestDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(requestDoctorBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 297, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(requestDoctorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(requestDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestappointmentButton)
                    .addComponent(givefeedbackTooltip1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Future Appointments");

        futureappointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Date", "Confirmed"
            }
        ));
        jScrollPane3.setViewportView(futureappointmentTable);
        if (futureappointmentTable.getColumnModel().getColumnCount() > 0) {
            futureappointmentTable.getColumnModel().getColumn(2).setHeaderValue("Confirmed");
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        loginnameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loginnameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginnameLabel.setText("<LOGIN NAME>");

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Past Appointments");

        pastappointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Date", "Notes"
            }
        ));
        jScrollPane4.setViewportView(pastappointmentTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(loginnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(loginnameLabel)
                    .addComponent(logoutButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        Login form = new Login();
        form.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void doctorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorComboBoxActionPerformed
        // TODO add your handling code here:
        JComboBox box = doctorComboBox;
        
        List<String> ListOfDoctors = new ArrayList<String>();
        try{
            ListOfDoctors = ListDoctor();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
        }
        
        box.removeAllItems();
        String newlist = "UNKNOWN";
        
        for(int i=0; i<ListOfDoctors.size();i++){
            box.addItem(ListOfDoctors.get(i));
        }
        
        
    }//GEN-LAST:event_doctorComboBoxActionPerformed

    private void viewratingComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewratingComboActionPerformed
        // TODO add your handling code here:
        
        if(viewratingCombo.getSelectedItem()== "[Click to Load Doctors]"){
            //Populate the ComboBox if it isn't already
            JComboBox box = viewratingCombo;
        
            List<String> ListOfDoctors = new ArrayList<String>();
            try{
                ListOfDoctors = ListDoctor();
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
            }
        
            box.removeAllItems();
            String newlist = "UNKNOWN";
        
            for(int i=0; i<ListOfDoctors.size();i++){
                box.addItem(ListOfDoctors.get(i));
            }
            String doctorInput = viewratingCombo.getSelectedItem().toString();
            String[] doctorInputFields = doctorInput.split("-");
            String chosendoctorID = doctorInputFields[1];
            
            float Rating = CalculateAverage(chosendoctorID);
            
            ratingLabel.setText("AVG: " + Rating + "/5");
        }
        else{
            String doctorInput = viewratingCombo.getSelectedItem().toString();
            String[] doctorInputFields = doctorInput.split("-");
            String chosendoctorID = doctorInputFields[1];
            
            float Rating = CalculateAverage(chosendoctorID);
            
            ratingLabel.setText("AVG: " + Rating + "/5");
               
        }
    }//GEN-LAST:event_viewratingComboActionPerformed

    private void requestDoctorBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDoctorBoxActionPerformed
        // TODO add your handling code here:
        JComboBox box = requestDoctorBox;
        
        List<String> ListOfDoctors = new ArrayList<String>();
        try{
            ListOfDoctors = ListDoctor();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
        }
        
        box.removeAllItems();
        String newlist = "UNKNOWN";
        
        for(int i=0; i<ListOfDoctors.size();i++){
            box.addItem(ListOfDoctors.get(i));
        }
    }//GEN-LAST:event_requestDoctorBoxActionPerformed

    private void submitfeedbackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitfeedbackButton1ActionPerformed
        // TODO add your handling code here:
        String doctorInput = doctorComboBox.getSelectedItem().toString();
        if(doctorInput == "[Click to Load Doctors]"){
            givefeedbackTooltip.setText("Unable to submit without selection");
            return;
        }
        //Retrieve DoctorID from ComboBox Text.
        String[] doctorInputFields = doctorInput.split("-");
        String chosendoctorID = doctorInputFields[1];
        
        
        //Assign given Rating
        Integer givenRating = ratingValue.getValue();
        
        //Assign given Feedback
        String givenFeedback = feedbackText.getText();
        
        
        //Save to Feedback.txt
        CreateFeedback objNewFeedback =
                new CreateFeedback(chosendoctorID,givenRating,givenFeedback);
        
        ratingValue.setValue(3);
        feedbackText.setText("");
    }//GEN-LAST:event_submitfeedbackButton1ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        loginnameLabel.setText(Login.LoginName);
        PopulateAppointmentsTables();
    }//GEN-LAST:event_formWindowActivated

    private void requestappointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestappointmentButtonActionPerformed
        // TODO add your handling code here:
        
        //Take DoctorInput
        String doctorInput = requestDoctorBox.getSelectedItem().toString();
        //Take DateInput
        Date dateInput = requestDate.getDate();
        
        //Validate DoctorInput & DateInput
        if(doctorInput == "[Click to Load Doctors]"){
            return;
        }
        
        //Isolate DoctorID
        String[] doctorInputFields = doctorInput.split("-");
        String chosendoctorID = doctorInputFields[1];
        
        
        //Add to Appointments.txt 
        NewAppointment appointment =
                new NewAppointment("Awaiting",chosendoctorID,Login.UserID,dateInput,"Notes not yet available");
        
        JOptionPane.showMessageDialog(null, "Appointment pending approval","Appointment Request Successfull",JOptionPane.OK_CANCEL_OPTION);
        
        
    }//GEN-LAST:event_requestappointmentButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientPage().setVisible(true);
            }
        });
    } 
    public List<String> ListDoctor() throws IOException{
    
        BufferedReader br;
        String line;
        String[] userFields;
        String LoggedInUser;
        Boolean LoggedIn = false;
        Integer linenumber = 1;

        br = new BufferedReader(new FileReader("Users.txt"));
        List<String> list = new ArrayList<String>();
        while((line = br.readLine()) != null){
            userFields = line.split(",");
            if (userFields[1].equals("Doctor")){
                list.add(userFields[2] + " " + userFields[3] + "-" + userFields[0]);
            }
            linenumber++;
        }
        return list;
    }
    public Float CalculateAverage(String DoctorID){
        //Search through feedback
        Boolean FoundResults = false;
        BufferedReader br;
        String line;
        String[] userFields;
        Integer linenumber = 1;
        float FeedbackTotal = 0;
        float FeedbackCount = 0;

        try{
            br = new BufferedReader(new FileReader("Feedback.txt"));
            while((line = br.readLine()) != null){
                userFields = line.split(",");
                //Any that match DoctorNo. to Selected DoctorID - > Take rating and add to total -> Add a count
                if (userFields[1].equals(DoctorID)){
                    FoundResults = true;
                    FeedbackCount = FeedbackCount + 1;
                    FeedbackTotal = FeedbackTotal + parseInt(userFields[2]);
                }
                linenumber++;
            }
            br.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
        }
        
        Float averageOutput = 0.0f;
        if (FoundResults != false){
            //Divide total rating by count of ratings to output an average.
            Double average = 0.0;
            Float averageUnformatted = 0.0f;
        
            averageUnformatted = FeedbackTotal/FeedbackCount;
            //need formatting to 2dp.p
            average = round(averageUnformatted,2); 
            averageOutput = average.floatValue();
        }
        else
        {
            averageOutput = 0f;
        }
        
        
        return (averageOutput);
    }
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();
        BigDecimal bd;
        bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
    
    public void PopulateAppointmentsTables(){
        
        DefaultTableModel futureModel = (DefaultTableModel) futureappointmentTable.getModel();
        DefaultTableModel pastModel = (DefaultTableModel) pastappointmentTable.getModel();
        
        
        futureModel.setRowCount(0);
        pastModel.setRowCount(0);
        String PatientID = Login.UserID;
        BufferedReader br;
        String line;
        String[] appointmentFields;
        Integer linenumber = 1;
        Date lineDate;
        DateFormat df = new SimpleDateFormat("mm/dd/yyyy");

        try{
            br = new BufferedReader(new FileReader("Appointments.txt"));
            while((line = br.readLine()) != null){
                appointmentFields = line.split(",");
                if (appointmentFields[3].equals(PatientID)){
                    String string = (appointmentFields[4]);
                    DateFormat format = new SimpleDateFormat("EEE MMM d HH:mm:ss z yyyy");
                    Date appointmentDate = format.parse(string);
                    if(appointmentDate.before(new Date())){
                        //PREVIOUS APPOINTMENT
                        pastModel.addRow(new Object[]{RetrieveUsersName(appointmentFields[2]),appointmentFields[4],appointmentFields[5]});
                    }
                    else if(appointmentDate.equals(new Date()) || appointmentDate.after(new Date())){
                        //FUTURE APPOINTMENT
                        futureModel.addRow(new Object[]{RetrieveUsersName(appointmentFields[2]),appointmentFields[4],appointmentFields[1]});
                    }
                }
                linenumber++;
            }

            br.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex,"ERROR",JOptionPane.OK_CANCEL_OPTION);
            Logger.getLogger(PatientPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String RetrieveUsersName(String UserID){
        
        String UsersName = "";
        BufferedReader br;
        String line;
        String[] userFields;
        Integer linenumber = 1;
        
        try{
            br = new BufferedReader(new FileReader("Users.txt"));
            while((line = br.readLine()) != null){
                userFields = line.split(",");
                if (userFields[0].equals(UserID)){
                    UsersName = userFields[2] + " " + userFields[3];
                }
                linenumber++;
            }

            br.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e,"ERROR",JOptionPane.OK_CANCEL_OPTION);
        }
        
        return UsersName;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JTextArea feedbackText;
    private javax.swing.JTable futureappointmentTable;
    private javax.swing.JLabel givefeedbackTooltip;
    private javax.swing.JLabel givefeedbackTooltip1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel loginnameLabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTable pastappointmentTable;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JSlider ratingValue;
    private org.jdesktop.swingx.JXDatePicker requestDate;
    private javax.swing.JComboBox<String> requestDoctorBox;
    private javax.swing.JButton requestappointmentButton;
    private javax.swing.JButton submitfeedbackButton1;
    private javax.swing.JComboBox<String> viewratingCombo;
    // End of variables declaration//GEN-END:variables
}
